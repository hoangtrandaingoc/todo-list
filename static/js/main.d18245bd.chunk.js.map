{"version":3,"sources":["image/check.svg","image/check-complete.svg","image/tick.svg","components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","this","props","item","onClick","url","checkImg","isComplete","checkCompleteImg","className","classNames","src","width","title","Component","PropType","shape","bool","isRequired","string","func","App","state","newItem","todoItems","onKeyUp","bind","onChange","event","index","indexOf","setState","slice","keyCode","text","target","value","trim","length","tick","type","placeholder","map","key","onItemClicked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,kC,mTCUrCC,E,uKACO,IAAD,EACoBC,KAAKC,MAAtBC,EADH,EACGA,KAAMC,EADT,EACSA,QACTC,EAAMC,IAKV,OAJIH,EAAKI,aACLF,EAAMG,KAIN,yBAAKC,UAAWC,IAAW,WAAY,CAAC,oBAAsBP,EAAKI,cAC/D,yBAAKH,QAASA,EAASO,IAAKN,EAAKO,MAAO,KACxC,2BAAIT,EAAKU,Y,GAXFC,aAoBvBd,EAASe,SAAW,CAChBZ,KAAMY,IAASC,MAAM,CACjBT,WAAYQ,IAASE,KAAKC,WAC1BL,MAAOE,IAASI,SAEpBf,QAASW,IAASK,KAAKF,YAGZlB,Q,iBCyFAqB,E,kDAzHb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXC,QAAS,GACTC,UAAW,CACT,CAAEX,MAAO,kBAAmBN,YAAY,GACxC,CAAEM,MAAO,oBACT,CAAEA,MAAO,wBACT,CAAEA,MAAO,iCAIb,EAAKY,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAdL,E,0DAiBCvB,GAAM,IAAD,OACjB,OAAO,SAACyB,GACN,IAAMrB,EAAaJ,EAAKI,WACjBiB,EAAa,EAAKF,MAAlBE,UACDK,EAAQL,EAAUM,QAAQ3B,GAChC,EAAK4B,SAAS,CACZP,UAAU,GAAD,mBACJA,EAAUQ,MAAM,EAAGH,IADf,gBAGF1B,EAHE,CAILI,YAAaA,KAJR,YAMJiB,EAAUQ,MAAMH,EAAM,U,8BAMzBD,GACN,GAAsB,KAAlBA,EAAMK,QAAe,CACvB,IAAIC,EAAON,EAAMO,OAAOC,MACxB,IAAKF,EACH,OAIF,KADAA,EAAOA,EAAKG,QAEV,OAGFpC,KAAK8B,SAAS,CACVR,QAAS,GACTC,UAAU,CACR,CAACX,MAAMqB,EAAM3B,YAAW,IADjB,mBAEJN,KAAKqB,MAAME,iB,+BAOfI,GACP3B,KAAK8B,SAAS,CACZR,QAASK,EAAMO,OAAOC,U,+BAwBjB,IAAD,SACuBnC,KAAKqB,MAA3BE,EADD,EACCA,UAAWD,EADZ,EACYA,QAClB,GAAGC,EAAUc,OACX,OACA,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,YAAf,SAEA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKE,IAAK4B,IAAM3B,MAAO,KACvB,2BACE4B,KAAK,OACLC,YAAY,oBACZL,MAAOb,EACPI,SAAU1B,KAAK0B,SACfF,QAASxB,KAAKwB,WAKhBD,EAAUc,QAAUd,EAAUkB,KAAI,SAACvC,EAAM0B,GAAP,OAClC,kBAAC,EAAD,CACEc,IAAKd,EACL1B,KAAMA,EACNC,QAAS,EAAKwC,cAAczC,QAIlC,yBAAKM,UAAU,e,GAjHLK,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d18245bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/check.7a0423bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/check-complete.0dd85424.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick.7da2026c.svg\";","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropType from 'prop-types';\n\nimport './TodoItem.css';\nimport checkImg from '../image/check.svg'\nimport checkCompleteImg from '../image/check-complete.svg'\n\n\n\nclass TodoItem extends Component{\n    render(){\n        const {item, onClick} = this.props;\n        let url = checkImg;\n        if (item.isComplete){\n            url = checkCompleteImg;\n        }\n\n        return(\n            <div className={classNames('TodoItem', {'TodoItem-Complete' : item.isComplete})}>\n                <img onClick={onClick} src={url} width={32}></img>\n                <p>{item.title}</p>\n            </div>\n        );\n    }\n}\n\n//PropType kiem tra du lieu cua props va component nhan vao\n//Co cai nhin truc quang hon ve component\n//Tranh gap loi\nTodoItem.PropType = {\n    item: PropType.shape({\n        isComplete: PropType.bool.isRequired,\n        title: PropType.string\n    }),\n    onClick: PropType.func.isRequired\n}\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem';\nimport tick from './image/tick.svg'\n\nclass App extends Component{\n  constructor(){\n    super();\n    // Obj\n    this.state = {\n      newItem: \"\",\n      todoItems: [\n        { title: \"Learn HTML, CSS\", isComplete: true},\n        { title: \"Learn Javascript\"},\n        { title: \"Learn how to use Git\"},\n        { title: \"Complete the Reactjs course\"}\n      ]\n    }\n\n    this.onKeyUp = this.onKeyUp.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onItemClicked(item){\n    return (event) => {\n      const isComplete = item.isComplete;\n      const {todoItems} = this.state;\n      const index = todoItems.indexOf(item);\n      this.setState({\n        todoItems: [\n          ...todoItems.slice(0, index),\n          {\n            ...item,\n            isComplete: !isComplete\n          },\n          ...todoItems.slice(index+1)\n        ]\n      })\n    }\n  }\n\n  onKeyUp(event){\n    if (event.keyCode === 13){//enter key\n      let text = event.target.value;\n      if (!text){\n        return;\n      }\n\n      text = text.trim();\n      if (!text){\n        return;\n      }\n\n      this.setState({\n          newItem: \"\",\n          todoItems: [\n            {title:text, isComplete:false},\n            ...this.state.todoItems\n          ]\n        }\n      )\n    }\n  }\n\n  onChange(event){\n    this.setState({\n      newItem: event.target.value\n    });\n  }\n    \n//Conditional rendering dung if else  \n//   render(){\n//     if (this.todoItems.length > 0) {\n//       return (\n//         <div className=\"App\">\n//           {/* khi dung map de bien 1 arr gom obj thanh arr cac component thi phai co key */}\n//           {\n//             this.todoItems.map((item, index) => <TodoItem key={index} item={item}/>)\n//           }\n//         </div>\n//       );\n//     } else {\n//       return(\n//         <div className=\"App\">Nothing here</div>\n//       );\n//     }\n//   }\n// }\n  \n// Conditional rendering use and or\n  render(){\n    const {todoItems, newItem} = this.state;\n    if(todoItems.length){\n      return (\n      <div className=\"App\">\n        <div className=\"Name-App\">Todos</div>\n\n        <div className=\"Content\">\n          <div className=\"Header\"> \n            <img src={tick} width={30}/>\n            <input \n              type=\"text\" \n              placeholder=\"Add a new item...\"\n              value={newItem} //sau khi add item input se trong\n              onChange={this.onChange} \n              onKeyUp={this.onKeyUp}\n              //value vs onChange di cung nhau\n            />\n          </div>\n\n          { todoItems.length && todoItems.map((item, index) => \n            <TodoItem \n              key={index} \n              item={item} \n              onClick={this.onItemClicked(item)}\n            />\n            )\n          } \n        <div className=\"Menu\">\n          </div>\n        </div>\n      </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}